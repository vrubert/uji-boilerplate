package es.uji.apps.{{applicationName}}.services.rest;

import com.sun.jersey.api.core.InjectParam;
import es.uji.apps.{{applicationName}}.models.{{modelName}};
import es.uji.apps.{{applicationName}}.services.{{modelName}}Service;
import es.uji.commons.rest.CoreBaseService;
import es.uji.commons.rest.UIEntity;
import es.uji.commons.sso.AccessManager;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

@Path("{{#pluralize}}{{instanceName}}{{/pluralize}}")
public class {{modelName}}Resource extends CoreBaseService
{
    @InjectParam
    private {{modelName}}Service {{instanceName}}Service;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<UIEntity> get{{#pluralize}}{{modelName}}{{/pluralize}}()
    {
        Long connectedUserId = AccessManager.getConnectedUserId(request);
        List<{{modelName}}> lista{{#pluralize}}{{modelName}}{{/pluralize}} = {{instanceName}}Service.getAll(connectedUserId);
        return UIEntity.toUI(lista{{#pluralize}}{{modelName}}{{/pluralize}});
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public UIEntity insert{{modelName}}(UIEntity entity)
    {
        Long connectedUserId = AccessManager.getConnectedUserId(request);
        {{modelName}} {{instanceName}} = entity.toModel({{modelName}}.class);
        {{instanceName}}Service.insert({{instanceName}}, connectedUserId);
        return UIEntity.toUI({{instanceName}});
    }

    @PUT
    @Path("{{#javaPath}}{{instanceName}}{{/javaPath}}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public UIEntity update{{modelName}}(@PathParam("{{instanceName}}Id") Long {{instanceName}}Id, UIEntity entity)
    {
        Long connectedUserId = AccessManager.getConnectedUserId(request);
        {{modelName}} {{instanceName}} = entity.toModel({{modelName}}.class);
        {{instanceName}}Service.update({{instanceName}}, connectedUserId);
        return UIEntity.toUI({{instanceName}});
    }

    @DELETE
    @Path("{{#javaPath}}{{instanceName}}{{/javaPath}}")
    public Response delete{{modelName}}(@PathParam("{{instanceName}}Id") Long {{instanceName}}Id, UIEntity entity)
    {
        Long connectedUserId = AccessManager.getConnectedUserId(request);
        {{instanceName}}Service.delete({{instanceName}}Id, connectedUserId);
        return Response.ok().build();
    }
}
